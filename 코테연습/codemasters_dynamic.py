import sys

# 동적 계획법
# 큰 문제를 작은 문제로 나누고, 그 결과를 재사용하여 문제를 효율적으로 해결하는 방법입니다. 
# 시간과 계산을 줄이는 데 큰 이점을 제공하지만, 그만큼 문제의 구조를 잘 이해하고 적용하는 것이 중요합니다.

def tile_floor(n):
    # n이 1 또는 2일 때는 미리 정의된 값을 반환
    if n == 1:
        return 1
    elif n == 2:
        return 2
    
    # dp 배열을 만들어서 결과를 저장
    dp = [0] * (n + 1)
    # [0, 0, 0, 0, 0, 0] 이런식으로 배열이 생긴다
    
    # 초기값 설정
    dp[1] = 1
    dp[2] = 2
    
    # 동적 계획법 : 주어진 것을 더 작은 값으로 나누어서 푸는 문제이다
    # 점화식을 이용하여 dp 테이블 채우기
    for i in range(3, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    
    # 가로 길이 n일 때의 경우의 수 반환
    return dp[n]

# 사용자로부터 입력 받기
N = int(input())
print(tile_floor(N))